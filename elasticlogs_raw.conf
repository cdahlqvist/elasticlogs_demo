input {
	stdin {}
}

filter {
    grok {
        match => [ "message" , '"%{IPORHOST:clientip}" %{HTTPDUSER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) %{QUOTEDSTRING:referrer} %{QUOTEDSTRING:agent}']
	}

    if "_grokparsefailure" not in [tags] {
        # Create hash based on original IP address and user agent to identify user
        fingerprint {
            source => ["clientip","agent"]
            target => "user_hash"
            method => "MD5"
            key => "test"
            base64encode => true
        }

        # mask last 8 bytes of IP address
        fingerprint {
            source => "clientip"
            target => "clientip"
            method => "IPV4_NETWORK"
            key => "24"
        }

        date {
            match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
        }

        mutate {
            remove_field => ["host", "timestamp"]
        }
   
        geoip {
            source => "clientip"
            target => "geoip"
        }
  
        useragent {
            source => "agent"
            target => "useragent"
        }

        grok {
            match => ["referrer", ":\/\/%{DATA:referrer_domain}\/"]
        }

        if "_grokparsefailure" in [tags] {
            mutate {
               remove_tag => "_grokparsefailure"
            }
        }

        mutate {
            remove_field => ["host", "message"]
        }
    }
}

output {
    if "_grokparsefailure" not in [tags] {
        elasticsearch {
            index => "elasticlogs-%{+YYYY.MM.dd}"
            workers => 2
            flush_size => 5000
            hosts =>[""]
            user => ""
            password => ""
            ssl => true
        }
    } else {       
        stdout {
            codec => line { 
                format => "%{message}"
            }
        }
    }
}